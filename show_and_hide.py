# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ShowAndHideVisibleLayerByType
                                 A QGIS plugin
 A simple plugin that allows you to turn visible vector and raster layers on and off.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-20
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Tomasz Mazuga | MGGP S.A.
        email                : tmazuga@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QKeySequence
from qgis.PyQt.QtWidgets import QAction

from qgis.core import QgsMapLayerType, QgsProject, QgsMapLayer
# Initialize Qt resources from file resources.py
from .icons.resources import *
# Import the code for the dialog
import os.path


class ShowAndHideVisibleLayerByType:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ShowAndHideVisibleLayerByType_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.V_LAYER_CHECK = []
        self.R_LAYER_CHECK = []

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ShowAndHideVisibleLayerByType', message)

    def add_buttons_action(self, image: str, button_name: str, key_seq: str, func_name) -> QAction:
        """Function to add button actions to toolbar"""
        action_button = QAction(QIcon(image),
                                button_name,
                                self.iface.mainWindow())
        shortcut = QKeySequence(self.tr(key_seq))
        action_button.setShortcuts(shortcut)
        action_button.triggered.connect(func_name)
        self.iface.addToolBarIcon(action_button)
        self.actions.append(action_button)
        return action_button

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        # icon_path = ':/plugins/show_and_hide/icons/icon.png'
        # self.add_action(
        #     icon_path,
        #     text=self.tr(u'Show/Hide Layers by type'),
        #     callback=self.run,
        #     parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        # create buttons actions
        self.add_buttons_action(":/plugins/show_and_hide/icons/vector.png",
                                                    self.tr('Hide / Show visible vector layers'),
                                                    'Alt+1', self.show_hide_v)

        self.add_buttons_action(":/plugins/show_and_hide/icons/raster.png",
                                                    self.tr('Hide / Show visible raster layers'),
                                                    'Alt+2', self.show_hide_r)



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removeToolBarIcon(action)

    def show_hide(self, list_name: list, layer_type: QgsMapLayerType) -> None:
        """Template for toolbar functions show/hide  layers"""
        if list_name:
            for layer in list_name:
                try:
                    QgsProject.instance().layerTreeRoot().findLayer(layer.layerId()).setItemVisibilityChecked(True)
                except RuntimeError:
                    pass
            list_name.clear()
        else:
            root = QgsProject.instance().layerTreeRoot()
            layer_list = root.findLayers()
            for list_object in layer_list:
                if list_object.isVisible() and list_object.layer().type() == layer_type:
                    list_name.append(list_object)
                else:
                    pass
                for layer in list_name:
                    try:
                        QgsProject.instance().layerTreeRoot().findLayer(layer.layerId()).setItemVisibilityChecked(
                            False)
                    except RuntimeError:
                        pass

    def show_hide_v(self):
        """Toolbar function show/hide vector layer"""
        return self.show_hide(self.V_LAYER_CHECK, QgsMapLayer.VectorLayer)

    def show_hide_r(self):
        """Toolbar function show/hide raster layer"""
        return self.show_hide(self.R_LAYER_CHECK, QgsMapLayer.RasterLayer)
